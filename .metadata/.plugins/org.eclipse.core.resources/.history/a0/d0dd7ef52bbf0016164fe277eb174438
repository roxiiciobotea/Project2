package service;

import java.util.ArrayList;
import java.util.List;

import serviceComponents.*;

public class Dispatcher {
	static private Dispatcher singleton = null;
	private List<Subscription> subscriptions;

	/**
	 * Singleton => private constructor
	 */
	private Dispatcher() {
		subscriptions = new ArrayList<>();
	}

	/**
	 * access point to the singleton instance
	 */
	static public Dispatcher instance() {
		if (singleton == null)
			singleton = new Dispatcher();
		return singleton;
	}

	/**
	 * @param event
	 * @param source
	 * 
	 *            for each subscriber, checks if it is interested in the event,
	 *            checks if there's any filter and applies it and if everything
	 *            is ok, informs the subscriber about the event
	 */
	public void publish(Event event, Producer source) {
		for (Subscription s : subscriptions) {
			if (s.getEventType().equals(event.getType())) {
				if ((s.getFilter() == null) || (s.getFilter().apply(event))) {
					s.getConsumer().inform(event);
				}
			}
		}

	}

	/**
	 * adds a new subscriber to the list (with specific event and filter)
	 */
	public void subscribe(Consumer consumer, String type, Filter filter) {
		this.subscriptions.add(new Subscription(consumer, type, filter));
	}
}
